// <auto-generated />
using System;
using ConcentraTest.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConcentraTest.Migrations
{
    [DbContext(typeof(ConcentraContext))]
    partial class ConcentraContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConcentraTest.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Brand1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Brand");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("Wdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("WDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BrandId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ConcentraTest.Models.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("ClientID");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PersonTypeID");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("Wdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("WDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ClientId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ConcentraTest.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<string>("Model1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Model");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("Wdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("WDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("ConcentraTest.Models.PersonType", b =>
                {
                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonTypeId"));

                    b.Property<string>("PersonType1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PersonType");

                    b.Property<int?>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime?>("Wdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("WDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PersonTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonTypes");
                });

            modelBuilder.Entity("ConcentraTest.Models.Plate", b =>
                {
                    b.Property<string>("PlateId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("PlateID")
                        .IsFixedLength();

                    b.Property<int>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("PlateId")
                        .HasName("PK_Plates_1");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Plates");
                });

            modelBuilder.Entity("ConcentraTest.Models.PlateRecord", b =>
                {
                    b.Property<int>("PlateRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlateRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlateRecordId"));

                    b.Property<string>("PlateId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("PlateID")
                        .IsFixedLength();

                    b.Property<decimal>("PlateValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("Wdate")
                        .HasColumnType("datetime")
                        .HasColumnName("WDate");

                    b.HasKey("PlateRecordId");

                    b.HasIndex("PlateId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("PlateRecords");
                });

            modelBuilder.Entity("ConcentraTest.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Status1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Status");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("ConcentraTest.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConcentraTest.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("ClientID");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("ModelID");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleTypeID");

                    b.Property<DateTime>("Wdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("WDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ModelId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ConcentraTest.Models.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleTypeId"));

                    b.Property<decimal>("PlatePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PlateType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("VehicleType1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VehicleType");

                    b.Property<DateTime>("Wdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("WDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("VehicleTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("ConcentraTest.Models.Brand", b =>
                {
                    b.HasOne("ConcentraTest.Models.Status", "Status")
                        .WithMany("Brands")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Brands_Status");

                    b.HasOne("ConcentraTest.Models.User", "User")
                        .WithMany("Brands")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Brands_Users");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConcentraTest.Models.Client", b =>
                {
                    b.HasOne("ConcentraTest.Models.PersonType", "PersonType")
                        .WithMany("Clients")
                        .HasForeignKey("PersonTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Clients_PersonTypes");

                    b.HasOne("ConcentraTest.Models.Status", "Status")
                        .WithMany("Clients")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Clients_Status");

                    b.HasOne("ConcentraTest.Models.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Clients_Users");

                    b.Navigation("PersonType");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConcentraTest.Models.Model", b =>
                {
                    b.HasOne("ConcentraTest.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_Models_Brands");

                    b.HasOne("ConcentraTest.Models.Status", "Status")
                        .WithMany("Models")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Models_Status");

                    b.HasOne("ConcentraTest.Models.User", "User")
                        .WithMany("Models")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Models_Users");

                    b.Navigation("Brand");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConcentraTest.Models.PersonType", b =>
                {
                    b.HasOne("ConcentraTest.Models.Status", "Status")
                        .WithMany("PersonTypes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_PersonTypes_Status");

                    b.HasOne("ConcentraTest.Models.User", "User")
                        .WithMany("PersonTypes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PersonTypes_Users");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConcentraTest.Models.Plate", b =>
                {
                    b.HasOne("ConcentraTest.Models.Vehicle", "Vehicle")
                        .WithMany("Plates")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("FK_Plates_Vehicles");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ConcentraTest.Models.PlateRecord", b =>
                {
                    b.HasOne("ConcentraTest.Models.Plate", "Plate")
                        .WithMany("PlateRecords")
                        .HasForeignKey("PlateId")
                        .IsRequired()
                        .HasConstraintName("FK_PlateRecords_Plates");

                    b.HasOne("ConcentraTest.Models.Status", "Status")
                        .WithMany("PlateRecords")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PlateRecords_Status");

                    b.HasOne("ConcentraTest.Models.User", "User")
                        .WithMany("PlateRecords")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PlateRecords_Users");

                    b.Navigation("Plate");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConcentraTest.Models.Vehicle", b =>
                {
                    b.HasOne("ConcentraTest.Models.Brand", "Brand")
                        .WithMany("Vehicles")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_Brands");

                    b.HasOne("ConcentraTest.Models.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_Clients");

                    b.HasOne("ConcentraTest.Models.Model", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_Models");

                    b.HasOne("ConcentraTest.Models.Status", "Status")
                        .WithMany("Vehicles")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_Status");

                    b.HasOne("ConcentraTest.Models.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_Users");

                    b.HasOne("ConcentraTest.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicles_VehicleTypes");

                    b.Navigation("Brand");

                    b.Navigation("Client");

                    b.Navigation("Model");

                    b.Navigation("Status");

                    b.Navigation("User");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("ConcentraTest.Models.VehicleType", b =>
                {
                    b.HasOne("ConcentraTest.Models.Status", "Status")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_VehicleTypes_Status");

                    b.HasOne("ConcentraTest.Models.User", "User")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_VehicleTypes_Users");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConcentraTest.Models.Brand", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ConcentraTest.Models.Client", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ConcentraTest.Models.Model", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ConcentraTest.Models.PersonType", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ConcentraTest.Models.Plate", b =>
                {
                    b.Navigation("PlateRecords");
                });

            modelBuilder.Entity("ConcentraTest.Models.Status", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Clients");

                    b.Navigation("Models");

                    b.Navigation("PersonTypes");

                    b.Navigation("PlateRecords");

                    b.Navigation("VehicleTypes");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ConcentraTest.Models.User", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Clients");

                    b.Navigation("Models");

                    b.Navigation("PersonTypes");

                    b.Navigation("PlateRecords");

                    b.Navigation("VehicleTypes");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ConcentraTest.Models.Vehicle", b =>
                {
                    b.Navigation("Plates");
                });

            modelBuilder.Entity("ConcentraTest.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
